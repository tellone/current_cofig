  pending # express the regexp above with the code you wish you had,V
,V
,v
    let g:quickfix_is_open = 0,V
nnoremap <c-q> :call QuickfixToggle()<cr>,V
    cclose,V
    cclose,v
nmap <leader>cc :botright cope<cr>,V
nnoremap <c-q> :call QuickfixToggle()<cr>    function! QuickfixToggle()        if g:quickfix_is_open            cclose            let g:quickfix_is_open = 0        else            copen            let g:quickfix_is_open = 1        endif    endfunction,v
    assert_equal "User", sample.name,V
@current_recipe = nil,V
 ,v
# >---------------------------------[ Pry ]---------------------------------<@current_recipe = "pry"@before_configs["pry"].call if @before_configs["pry"]say_recipe 'pry'@configs[@current_recipe] = configgem 'pry' formated_appName = app_name.capitalizeinscript = <<-INSCRIPT!!!#{formated_appName}::Application.configure do  # Use Pry instead of IRB  silence_warnings do    begin      require 'pry'      IRB = Pry    rescue LoadError    end  endendINSCRIPTcreate_file("config/initializers/console.rb", inscript)@current_recipe = nil,V
fomated_appName = app_Nameinscript = <<-INSCRIPT,V
formated_appName[1] = formated_appName[1].uppcase,V
app_name=,V
MyApplication::Application.configure,v
        let saved_unnamed_register = @@,V
f,v
  echom shellescape(@@),V
        silent execute "grep! -R " . shellescape(@@) . " ."        copen        let @@ = saved_unnamed_register,V
    execute "normal! `<v`>y" ,V
    vnoremap <leader>g :<c-u>call GrepOperator(visualmode())<cr>,V
i,v
    nnoremap <leader>g :set operatorfunc=GrepOperator<cr>g@    function! GrepOperator(type)        echom "Test"    endfunction,V
copy_file(pry_init_path, ,V
create_file "config/initializers/generators.rb" do  "MyApplication::Application.configure do" do  "  # Use Pry instead of IRB" do  "  silence_warnings do" do    "begin"  "    require 'pry'"  "    IRB = Pry"  "    rescue LoadError"  "  end"  "end"end,V
pry_init_path = relative_to_original_destination_root("/gitrepos/myProjects/ruby_stuff/rails_wiz/console.init.rb", false),V
end,V
 "config/initializers/generators.rb",v
after_bundler do,V
    begin,V
begin,v
@configs[@current_recipe] = config,V
  generate 'rspec:install',V
after_bundler do  generate 'rspec:install'end,V
@current_recipe = "rspec"@before_configs["rspec"].call if @before_configs["rspec"]say_recipe 'RSpec',V
# >---------------------------------[ RSpec ]---------------------------------<,V
        rails new $1 -m "$HOME/Public/new_rails1.rb" -T -d mysql,V
   elif [ $,V
    if [ $# == 1 ]; then,V
source $cofig1/func_lib,V
" =>,V
gvim(){ /usr/bin/gvim -f "$@" & true; }dd,V
[ ! -f "$HOME/.rvm/scripts/rvm" ] || . "$HOME/.rvm/scripts/rvm",V
",v
    let g:syntastic_auto_loc_list=0,V
# This file is copied to spec/ when you run 'rails generate rspec:install'ENV["RAILS_ENV"] ||= 'test'require File.expand_path("../../config/environment", __FILE__)require 'rspec/rails'require 'rspec/autorun'# Requires supporting ruby files with custom matchers and macros, etc,# in spec/support/ and its subdirectories.Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}RSpec.configure do |config|  # ## Mock Framework  #  # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:  #  # config.mock_with :mocha  # config.mock_with :flexmock  # config.mock_with :rr  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures  config.fixture_path = "#{::Rails.root}/spec/fixtures"  # If you're not using ActiveRecord, or you'd prefer not to run each of your  # examples within a transaction, remove the following line or assign false  # instead of true.  config.use_transactional_fixtures = true  # If true, the base class of anonymous controllers will be inferred  # automatically. This will be the default behavior in future versions of  # rspec-rails.  config.infer_base_class_for_anonymous_controllers = falseend,V
gr√•p,V
    let g:syntastic_mode_map = { 'mode': 'active',                               \ 'active_filetypes': ['ruby', 'php'],                               \ 'passive_filetypes': ['puppet'] },V
# This file is copied to spec/ when you run 'rails generate rspec:install'ENV["RAILS_ENV"] ||= 'test'require File.expand_path("../../config/environment", __FILE__)require 'rspec/rails'require 'rspec/autorun'# Requires supporting ruby files with custom matchers and macros, etc,# in spec/support/ and its subdirectories.Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}RSpec.configure do |config|  # ## Mock Framework  #  # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:  #  # config.mock_with :mocha  # config.mock_with :flexmock  # config.mock_with :rr  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures  config.fixture_path = "#{::Rails.root}/spec/fixtures"  # If you're not using ActiveRecord, or you'd prefer not to run each of your  # examples within a transaction, remove the following line or assign false  # instead of true.  config.use_transactional_fixtures = true  # If true, the base class of anonymous controllers will be inferred  # automatically. This will be the default behavior in future versions of  # rspec-rails.  config.infer_base_class_for_anonymous_controllers = falsee,v
elif [ -d "$HOME/Documents" ]; then    typeset docs="$HOME/Documents"    : ~docs,V
 # Scenario:    # Given    # When    # Then    # And  ,v
,V
    #############################################      # Scenario Outline:    # Gvien "<code>"    # when "<other code>"    # then "more code",V
require 'fivemat/minitest/autorun',V
 gem 'minitest',V
gem 'autorun',V
  silence_warnings do    require 'pry'    IRB = Pry  end,V
  gem 'rspec-rails'  gem 'webrat'  gem 'selenium-client',V
binding.pry,v
Given# The --wip switch was used, so the failures were expected. All is good.,V
Given /^a genre named Comedy$/ do  @genre = endWhen /^I create a movie Caddyshack in the Comedy genre$/ do  pending # express the regexp above with the code you wish you hadendThen /^Caddyshack should be in the genere Comedy$/ do  pending # express the regexp above with the code you wish you hadend,V
||||||||||||||||||,2
Given /^a genre named Comedy$/ do||   pending # express the regexp above with the code you wish you had|| end|| || When /^I create a movie Caddyshack in the Comedy genre$/ do||   pending # express the regexp above with the code you wish you had|| end|| || Then /^Caddyshack should be in the genere Comedy$/ do||   pending # express the regexp above with the code you wish you had|| end|| ,v
    #when,V
    #Gvin,V
  #Scenario:,V
  gem "webrat",V
group :assets do  gem 'sass-rails',   '~> 3.2.3'  gem 'coffee-rails', '~> 3.2.1'  gem 'uglifier', '>= 1.0.3'end,V
gem 'jquery-rails',V
  # See https://github.com/sstephenson/execjs#readme for more supported runtimes,V
  # gem 'therubyracer', :platform => :ruby,V
group :asertdd do,V
nd,V
# Gems used only for assets and not required# in production environments by default.group :assets do  gem 'sass-rails',   '~> 3.2.3'  gem 'coffee-rails', '~> 3.2.1'  gem 'uglifier', '>= 1.0.3'e,v
gem 'mysql2',V
gem 'rails', '3.2.1',V
source 'https://rubygems.org',V
u,v
  # gem 'therubyracer',V
# gem 'aws-s3', :require => 'aws/s3',V
# gem 'sqlite3-ruby', :require => 'sqlite3',V
# Bundle the extra gems:,V
# gem 'ruby-debug',V
# To use debugger,V
# gem 'capistrano',V
# Deploy with Capistrano,V
# gem 'unicorn',V
# Use unicorn as the web server,V
hhhviiii,v
"%l:%M%p",v
    Given a movie listing    When I set the show time to "2007-10-10" at "2:00pm"    Then the show time disribtion should say "October 10 2007 at 2pm" ,v
    Given a movie listing    When I set the show time to "2007-10-10" at "2:15pm"    Then the showtime describtion shoud say "October 10, 2007 (2:15pm)" ,V
  @movie = Movie.create!,V
Given /^a movie listing$/ do,V
  @movie.shotime.should eq(,V
Then /^the show time disribtion should say "([^"]*)"$/ do |arg1|,V
  ,V
  attr_accessible :showtime_date, :showtime_time,V
